services:
  postgres:
    image: postgres:15
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      #- ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}   
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}          
    ports:
      - "5050:80"  
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/misc/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: minio
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    #volumes:
    #  - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10

  kowl:
    image: rsmnarts/kowl:latest
    container_name: kowl
    ports:
      - "9002:8080"
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_CLIENT_ID: kowl
      KAFKA_GROUP_ID: kowl-group
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  topic-init:
    build: ./topic-init
    container_name: topic-init
    env_file:
      - .env
    environment:
      TOPIC_NAME: ${TOPIC_NAMES}
    depends_on:
      kafka:
        condition: service_healthy

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      TOPIC_NAME: ${TOPIC_NAME}
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep python || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  bets_consumer:
    build: ./consumer
    container_name: bets_consumer
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: python all_bets_consumer.py
    env_file:
      - .env
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      TOPIC_NAME: ${TOPIC_NAME}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep python || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3


  top-games-consumer:
    build:
      context: ./consumer
    container_name: top-games-consumer
    restart: always 
    env_file:
      - .env
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      TOPIC_NAME: top_games
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: python top_games_consumer.py
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep python || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  jobmanager:
    build: ./flink
    container_name: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - PYFLINK_PYTHON=python
      - PYFLINK_CLIENT_USE_IPV6=False
      - FLINK_TM_JVM_OPTIONS=-XX:MaxDirectMemorySize=256m
      - jobmanager.rpc.address=jobmanager
      - jobmanager.memory.process.size=1600m
      - taskmanager.memory.process.size=2304m
      - taskmanager.numberOfTaskSlots=1
      - parallelism.default=1
      - taskmanager.memory.task.off-heap.size=512m
      - taskmanager.memory.framework.off-heap.size=128m
      - taskmanager.memory.network.min=256m
      - taskmanager.memory.network.max=256m
      - taskmanager.memory.jvm-overhead.min=256m
      - taskmanager.memory.jvm-overhead.max=256m
      - taskmanager.memory.jvm-metaspace.size=256m
    volumes:
      - ./flink/jobs:/opt/flink/jobs
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/overview || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  taskmanager:
    build: ./flink
    container_name: taskmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - PYFLINK_PYTHON=python
      - PYFLINK_CLIENT_USE_IPV6=False
      - FLINK_TM_JVM_OPTIONS=-XX:MaxDirectMemorySize=256m
      - jobmanager.rpc.address=jobmanager
      - taskmanager.memory.process.size=2304m
      - taskmanager.numberOfTaskSlots=1
      - parallelism.default=1
      - taskmanager.memory.task.off-heap.size=512m
      - taskmanager.memory.framework.off-heap.size=128m
      - taskmanager.memory.network.min=256m
      - taskmanager.memory.network.max=256m
      - taskmanager.memory.jvm-overhead.min=256m
      - taskmanager.memory.jvm-overhead.max=256m
      - taskmanager.memory.jvm-metaspace.size=256m
    volumes:
      - ./flink/jobs:/opt/flink/jobs
    depends_on:
      jobmanager:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep taskmanager || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  airflow:
    build: ./airflow
    container_name: airflow
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./exporters:/opt/airflow/exporters
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  postgres_data:
  #kafka_data:
  minio_data:
  pgadmin_data:
